import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';
import { FormArray, FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from 'src/app-nucleo/shared/auth/auth.service';
import { BaseComponent } from 'src/app-nucleo/shared/componentes/base-components/base.component';
import { MensagemService } from 'src/app-nucleo/shared/componentes/mensagem/mensagem.service';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgxSpinnerService } from 'ngx-spinner';
import { KitService } from 'src/app/suprimento/services/kit.service';
import { ConsultaSelectSimples } from 'src/app-nucleo/shared/componentes/consulta-select/consulta-select-simples';
import { Kit } from 'src/app/suprimento/models/kit';
import { EntidadeDinamica } from 'src/app/suprimento/models/entidade-dinamica';
import { RequisicaoKit } from 'src/app/suprimento/models/requisicao-kit';
import { SituacaoRequisicao } from 'src/app/suprimento/models/situacao-requisicao';
import { KitMontagem } from 'src/app/suprimento/models/kit-montagem';
import { KitMontagemService } from 'src/app/suprimento/services/kit-montagem.service';
import { Subject } from 'rxjs';
import { ConsultaSelectCentroCustoPorEmpresa } from 'src/app-nucleo/shared/componentes/consulta-select/consulta-select-centro-custo-por-empresa';
import { EmpresaCentroCustoService } from 'src/app/services/empresa-centro-custo.service';
import { ConsultaSelectPersonalizado } from 'src/app-nucleo/shared/componentes/consulta-select/consulta-select-personalizado';
import { MovimentoEstoqueDto } from 'src/app/suprimento/models/movimento-estoque-dto';
import { RequisicaoService } from 'src/app/suprimento/services/requisicao.service';
import { MovimentoEstoqueItemDto } from 'src/app/suprimento/models/movimento-estoque-item-dto';
import { RequisicaoKitItens } from 'src/app/suprimento/models/requisicao-kit-itens';

@Component({
	selector: 'sal-requisicao-kit',
	templateUrl: './requisicao-kit.component.html'
})
export class RequisicaoKitComponent extends BaseComponent implements OnInit {

	@Input() itens: FormArray;
	@Input() tipo: string;
	@Input() edicao: boolean;
	@Input() rotina: EntidadeDinamica;
	@Input() requisicao: FormGroup;
	@Input() tipoMotivo: string;
	@Output() onPesquisar: EventEmitter<any> = new EventEmitter<any>();

	atendimentoKitArray;

	formulario: FormGroup;
	formularioEdicao: FormGroup;
	formularioAtendimento: FormGroup;
	formularioKitMontagem: FormArray;
	descricao = new FormControl('');

	SituacaoRequisicao = SituacaoRequisicao;

	configuracaoTable;
	exibeCodigoBarra = false;

	selecionadoTodos = false;

	requisicaoKitMontagemId: number;
	quantidadeAtenderModal: number;

	labelItemRequisicaoModal: string;
	requisitadoQuantidadeModal: number;
	controlaLoteValidade = false;
	obrigaCarregarKit = false;

	dataAtual = new Date().toISOString().substr(0, 10);
	kitMontagem: KitMontagem = new KitMontagem();	
	kit: Kit = new Kit();
	requisicaoKitItens: RequisicaoKitItens = new RequisicaoKitItens;

	tipoMovimentoKit = 'TRANSFERENCIA_KIT'

	movimentoEstoqueItemDtos: MovimentoEstoqueItemDto[] = [];
	selecionadoKitMontagemIds: number[][];

	loadingNgSelect = false;

	consultaSelectKitMontagem: ConsultaSelectPersonalizado = new ConsultaSelectPersonalizado(this.kitMontagemService);
	consultaSelectKit = new ConsultaSelectSimples(this.kitService);
	consultaSelectCentroCusto = new ConsultaSelectCentroCustoPorEmpresa(this.empresaCentroCustoService, this.authService);

	movimentoEstoqueDto: MovimentoEstoqueDto = new MovimentoEstoqueDto();

	subjectKitMontagem: Subject<string> = new Subject<string>();

	kitMontagens = [];
	kitMontagemProdutosModal = [];

	index = -1;
	indexEdicao;

	kitsSelecionados: number[] = [];

	constructor(
		private kitMontagemService: KitMontagemService,
		private requisicaoService: RequisicaoService,
		private kitService: KitService,
		private authService: AuthService,
		private spinner: NgxSpinnerService,
		private modalService: NgbModal,
		private msgService: MensagemService,
		private empresaCentroCustoService: EmpresaCentroCustoService,
		private formBuilder: FormBuilder,
	) { super(); }

	get requisitada(): boolean { return this.requisicao.controls.requisitada.value };
	get aprovada(): boolean { return this.requisicao.controls.aprovada.value };
	get atendida(): boolean { return this.requisicao.controls.atendida.value };

	get desabilitaAdicionar(): boolean {
		return (this.kitObrigatorio || this.formulario.invalid);
	}

	get kitObrigatorio(): boolean {
		return !this.formulario.controls.kit.value;
	}

	get colunaEditarExcluir(): boolean {
		return !this.rotina.aprovacao && !this.requisitada;
	}

	get labelAprovada(): string {
		return this.aprovada ? 'Aprovada' : 'Aprovar';
	}

	get desabilitaInputAprovacao(): boolean {
		return (this.rotina.aprovacao && ((this.requisitada && this.aprovada) || !this.requisitada)) || !this.rotina.aprovacao;
	}

	get colunaAtendida(): boolean {
		return this.atendida && this.aprovada;
	}

	get colunaAprovada(): boolean {
		return this.requisitada &&
			((this.aprovada && !this.rotina.aprovacao) ||
				this.rotina.aprovacao)
	}

	get situacaoAberta(): boolean {
		return this.requisicao.controls.situacaoRequisicao.value == 'ABERTA';
	}

	get situacaoAguardandoAtendimento(): boolean {
		return this.requisicao.controls.situacaoRequisicao.value == 'AGUARDANDO_ATENDIMENTO';
	}

	get rotinaAtendimento(): boolean {
		return this.rotina?.atendimento;
	}

	get labelSelecionarTodos(): string {
		return this.selecionadoTodos ? 'Demarcar todos os itens sem controle de lote' : 'Marcar todos os itens sem controle de lote';
	}	

	get formKitMontagem(): KitMontagem{
		return this.formulario.get('kitMontagem').value
	}

	ngOnInit(): void {
		this.onInicializar();		
	}

	onInicializar() {
		this.requisicao;
		this.montarFormulario(new RequisicaoKit());
		this.montarTable();
		this.descricao.setValue(this.formulario?.get('kit')?.value?.descricao)
		this.consultaSelectKitMontagem.definirFiltros([
		  { nome:'empresaId', valor: this.authService.empresaLogado.empresaId },
		  { nome:'centroCustoId', valor: this.requisicao.get('empresaCentroCustoFornecedor.centroCusto').value.id }
		]);
	  
		// Prepare selecionadoKitMontagemIds array
		this.selecionadoKitMontagemIds = [];
		const requisicaoKitsFormArrayOnInit = this.itens as FormArray;
	  
		// Inicialize o FormArray para o formularioKitMontagem
		this.formularioKitMontagem = this.formBuilder.array([]);
	  
		for (let indexI = 0; indexI < requisicaoKitsFormArrayOnInit.length; indexI++) {        
		  this.selecionadoKitMontagemIds.push([]);
		  const requisicaoKitFormGroup = requisicaoKitsFormArrayOnInit.at(indexI) as FormGroup;
		  const requisicaoKitItensFormArray = requisicaoKitFormGroup.get('requisicaoKitItens') as FormArray;
	  
		  // Inicialize um FormArray para armazenar os kitsMontagem para os subitens deste item
		  const subitemKitsMontagemFormArray = this.formBuilder.array([]);
	  
		  for (let indexJ = 0; indexJ < requisicaoKitItensFormArray.length; indexJ++) {
			this.selecionadoKitMontagemIds[indexI].push(null); 
	  
			// Inicialize um FormGroup para armazenar o kitMontagem para este subitem
			const kitMontagemFormGroup = this.formBuilder.group({ 
			  kitMontagem: [requisicaoKitItensFormArray.at(indexJ).get('kitMontagem').value] 
			});
			subitemKitsMontagemFormArray.push(kitMontagemFormGroup);
		  }
	  
		  // Adicione o FormArray deste item ao FormArray geral
		  this.formularioKitMontagem.push(subitemKitsMontagemFormArray);
		}
	  }
	  
	  

	pegarSituacao(){
		return this.requisicao.get('situacaoRequisicao').value;
	}

	montarTable() {
		this.configuracaoTable = {
			idTable: 'datatableRequisicaoKit',
			habilitaBotoesAcao: true,
			habilitaEditar: this.colunaEditarExcluir,
			habilitaExcluir: this.colunaEditarExcluir,
			habilitaVisualizar: !this.colunaEditarExcluir,
			colunas: [
				{ titulo: 'Kit', propriedade: 'kit.descricao', tamanho: 25, tipo: 'OBJETO', alinhamento: 'ESQUERDA' },
				{ titulo: 'Requisitada', propriedade: 'quantidade', tamanho: 15, alinhamento: 'CENTRO' },
				{ titulo: this.labelAprovada, propriedade: 'quantidadeAprovada', tamanho: 10, tipo: 'QUANTIDADE_INPUT', alinhamento: 'CENTRO', ocultaPropriedade: !this.colunaAprovada, desabilitaInput: this.desabilitaInputAprovacao },
				{ titulo: 'Atendida', propriedade: 'quantidadeAtendida', tamanho: 10, tipo: 'QUANTIDADE_INPUT', alinhamento: 'CENTRO', ocultaPropriedade: !this.colunaAtendida },
				{ titulo: 'Situação', propriedade: 'situacaoRequisicaoKit', tamanho: 15, alinhamento: 'CENTRO', tipo: 'SITUACAO_REQUISICAO', ocultaPropriedade: this.situacaoAberta }
			]
		};
	}

	montarFormulario(dados: RequisicaoKit) {
		this.formulario = RequisicaoKit.montarFormulario(dados);
		this.formulario.addControl('kitMontagemFormArray', this.formBuilder.array([]));
	}
	

	atualizarVariaveis() {
		setTimeout(() => {
			this.montarTable();
		})
	}
	adicionar() {
		let registro;
		if (!this.edicao) {						
			registro = this.itens.controls.find(item => item.get('kit').value?.id === this.formulario.controls.kit.value.id);
		}

		if (!registro) {
			this.itens.controls.push(this.formulario);
			this.limparFormulario();
			this.cancelar();
		} else {
			this.msgService.showMensagemAlerta(this.requisicao.controls.tipo.value + ' já registrado. Por favor, verifique.');
		}
	}

	cancelar() {
		this.montarFormulario(new RequisicaoKit());
		this.formulario.get('kit').enable();
		this.formulario.updateValueAndValidity();
		this.index = -1;
	}

	excluirModal(registro) {
		this.itens.removeAt(registro.index);
		this.limparFormulario();
	}

	visualizarModal(registro) {
		this.index = registro.index;
		this.edicao = true;
		this.montarFormulario(this.itens.controls[registro.index].value)
		this.formulario.disable();
	}	

	onEventoEditarColuna(registro) {
		if (registro.valor) {
			this.itens.controls[registro.index].get(registro.coluna).setValue(registro.valor);
		} else {
			this.itens.controls[registro.index].get(registro.coluna).setValue(0);
		}

		if (registro.valor > this.itens.controls[registro.index].get('quantidade').value) {
			this.msgService.showMensagemAlerta('Quantidade a ser aprovada é superior a quantidade requisitada.', 'Atenção');
		}

		if (registro.valor < 0) {
			this.msgService.showMensagemAlerta('Quantidade a ser aprovada inválida.', 'Atenção');
		}
	}

	limparFormulario() {
		this.montarFormulario(new RequisicaoKit());
		this.formulario.disable();
		this.edicao = false;
		this.index = -1;
	}

	abrirModalEdicao(content, registro){
		this.formularioEdicao = RequisicaoKit.montarFormulario((this.itens.controls[registro.index] as FormGroup).getRawValue());		
		this.formularioEdicao.get("quantidade").setValidators([Validators.min(1), Validators.required]);
		this.formularioEdicao.updateValueAndValidity();
		this.indexEdicao = registro.index;
		this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title', backdrop: false, size: 'xl' });
	}

	podeSair(){
		return true;
	}

	alterar(){
		this.itens.controls[this.indexEdicao].setValue(this.formularioEdicao.getRawValue());	
	}

	onSelecionarKit(index) {
		if (this.itens.controls[index].get('selecionado').value) {
			this.itens.controls[index].get('selecionado').setValue(false);
		} else {
			this.itens.controls[index].get('selecionado').setValue(true);
		}
	}

	visualizarAtendimentoKit(i) {
		this.montarFormulario(this.itens.controls[i].value);
		this.formulario.disable();
		this.edicao = true;
		this.index = i;
	}

	setRequisicaoKitAtender(index, quantidade) {
		if (quantidade > this.requisicao.controls.requisicaoKits.value[index].quantidadePendente) {
			this.msgService.showMensagemAlerta('Quantidade a ser atendida é superior a quantidade requisitada e aprovada.', 'Atenção');
		}
		(this.itens.controls[index] as FormGroup).controls.quantidadeAtender.setValue(quantidade);
	}

	addRequisicaoKitItem() {
		let requisicaoKitItensArray = this.formulario.get('requisicaoKitItens') as FormArray;
		requisicaoKitItensArray.push(this.formBuilder.group({ /* definições de controle aqui */ }));
	
		let kitMontagemFormArray = this.formulario.get('kitMontagemFormArray') as FormArray;
		kitMontagemFormArray.push(this.formBuilder.group({ /* definições de controle aqui */ }));
	}

	verificarKitMontagemDuplicado(event: any, subitem: any, i: number, j: number): void {
		const selectedKitMontagemId = event.id;
	  
		// Atualizamos o formularioKitMontagem com o valor atual
		this.formularioKitMontagem.get('kitMontagem').setValue(subitem.get('kitMontagem').value);
	  
		// Se o valor selecionado já está presente em qualquer lugar, então emitimos um alerta.
		for (let indexI = 0; indexI < this.selecionadoKitMontagemIds.length; indexI++) {
		  for (let indexJ = 0; indexJ < this.selecionadoKitMontagemIds[indexI].length; indexJ++) {
			if (indexI === i && indexJ === j) continue;
	  
			if (this.selecionadoKitMontagemIds[indexI][indexJ] === selectedKitMontagemId) {
			  this.msgService.showMensagemAlerta('Atenção! Kit Montagem já escolhido, por favor verifique', 'Atenção');
	  
			  // Como kitMontagemForm não é um FormArray, podemos simplesmente resetar o valor do campo.
			  this.formularioKitMontagem.get('kitMontagem').reset();
	  
			  return;
			}
		  }
		}
		// Atualizamos o item original com o valor de kitMontagem atualizado
		subitem.get('kitMontagem').setValue(this.formularioKitMontagem.get('kitMontagem').value);

		this.selecionadoKitMontagemIds[i][j] = selectedKitMontagemId;
	}

	
	
	setQuantidadeAtender(index, valor) {
        if (valor != undefined || valor != null) {
            this.kitMontagem.kitMontagemProdutos[index].quantidadeMovimentar = Number(valor);
        }        
    } 

	ajustaValoresParaAtender() {

        this.kitMontagem.kitMontagemProdutos.forEach(item => {
            if (item.quantidade > 0) {
                if (item.quantidadeMovimentar == null) {
                    item.quantidadeMovimentar = 0;
                }
                
                if (this.tipoMovimentoKit != 'CONSUMO') {
                    console.log('Calculo:' + item.quantidade +  ' - ' + item.quantidadeMovimentar)
                    item.quantidadeMovimentar = item.quantidade - item.quantidadeMovimentar
                    console.log('Resultado: ' + item.quantidadeMovimentar)
                }
            }
        });
    }

	verificaAtenderKit(item: any): boolean {
		if (this.formulario.get('kitMontagem').value == null || this.formulario.get('kitMontagem').value == ""){
			this.msgService.showMensagemAlerta('Kit não informado. Por favor, verifique.', 'Atenção');
			return false;
		} 
		if (this.formulario.get('kitMontagem').value.kit.id != item.get('kit').value.id){
			this.msgService.showMensagemAlerta('Kit selecionado não é o mesmo a ser atendido. Por favor, verifique.', 'Atenção');
			return false;
		} 
		return true;
	}
	
	atribuiKitMontagem(item: any, index: number): void {
		let controls = item.controls.requisicaoKitItens.controls;
		for (let i = 0; i < controls.length; i++) {
			let requisicaoKitItens = controls[i] as FormGroup;
			if (this.formKitMontagem.kit.id === item.get('kit').value.id) {
				if (!requisicaoKitItens.get('kitMontagem').value) {
					let kitMontagemFormArray = this.formulario.get('kitMontagemFormArray') as FormArray;
					let kitMontagemFormGroup = kitMontagemFormArray.at(index) as FormGroup;
					kitMontagemFormGroup.get('kitMontagem').setValue(this.formulario.get('kitMontagem').value);
					break;
				}
			}
		}
	}
	
	respostaAtendimentoKit(): void {
		this.modalService.dismissAll();
		this.msgService.showMensagemSucessoTempo('Atenção','Kit transferido com sucesso.');	
		this.consultaSelectKitMontagem = new ConsultaSelectPersonalizado(this.kitMontagemService);		
		this.consultaSelectKitMontagem.definirFiltros([
			{ nome:'empresaId', valor: this.authService.empresaLogado.empresaId },
			{ nome:'centroCustoId', valor: this.requisicao.get('empresaCentroCustoFornecedor.centroCusto').value.id }])
		this.formulario.reset();
		this.kitMontagens = [];
		this.spinner.hide();
		this.onPesquisar.emit();
	}
	
	erroAtenderKit(err: any): void {
		this.formulario.reset();
		this.kitMontagens = [];
		this.spinner.hide();
		this.msgService.showMensagemErro('', err);
		this.onPesquisar.emit();
	}
	
	atenderKit(item?, index?) {
		if (this.verificaAtenderKit(item)) {
			this.msgService.showMensagemQuestao(
				`O kit ${this.formulario.controls.kitMontagem.value.descricaoPesquisa} será transferido para o Centro de Custo ${this.requisicao.get('empresaCentroCustoSolicitante.centroCusto').value.descricaoPesquisa} \nDeseja continuar?`
				,'Atenção').then(ret => {
				if (ret.value) {
					this.modalService.dismissAll();
					this.ajustaValoresParaAtender();
					this.spinner.show();					
					this.atribuiKitMontagem(item, index);
					this.requisicaoService.atenderKit(item.getRawValue()).subscribe(() => {
						this.respostaAtendimentoKit();
					}, err => {
						this.erroAtenderKit(err);
					});					
				} else {
					return;
				}				
			}); 			
		}  		
	}

	buscarCodigoBarra(codigoBarra) {
		this.spinner.show();
		this.kitMontagemService.consultarCodigoBarra(this.authService.empresaLogado.empresaId, this.requisicao.get('empresaCentroCustoFornecedor.centroCusto').value.id, codigoBarra.value).subscribe(ret => {
			if (ret) {
				let requisicaoKit = this.buscarRelacaoKits(ret);
				if (requisicaoKit) {
					this.formulario.controls.kitMontagem.setValue(ret);
					this.exibeCodigoBarra = true;
					this.spinner.hide();
					this.atenderKit(requisicaoKit);
				} else {
					this.spinner.hide();
					this.msgService.showMensagemAlerta('Não foi encontrada uma correspondência para o kit. Por favor, verifique.', 'Atenção');
				}
			} else {
				this.exibeCodigoBarra = false;
				this.spinner.hide();
				this.msgService.showMensagemAlerta('Kit não encontrado. Por favor, verifique.', 'Atenção');
			}
		})
	}

	estornarKit(requisicaoKitItemId: number) {
		this.msgService.showMensagemQuestao(`O kit selecionado será estornado. Deseja continuar?`).then(res => {
			if (res.value) {
				this.requisicaoService.estornarKit(requisicaoKitItemId)
					.subscribe(ret => {
						this.msgService.showMensagemSucessoTempo('Sucesso', 'Kit estornado com sucesso.');
						this.onPesquisar.emit();
					}, err => {
						this.msgService.showMensagemErro('', err);
					});
			}
		});
	}	  

	buscarRelacaoKits(ret){
		return this.itens.controls.find(x => x.get('kit').value.id === ret.kit.id);
	}

	requisicaoKitItensFiltro(requisicaoKit) {
		return requisicaoKit.requisicaoKitItens.filter(item => !item.empresaCentroCustoSolicitante);
	  }
    

	returnColor(situacao) {		
		switch (situacao) {
			case 'ATENDIDA':
				return 'color: #4CAF50; font-weight: bold;';
			case 'ATENDIDA_PARCIALMENTE':
				return 'color: #FF9800; font-weight: bold;';
			case 'NAO_ATENDIDA':
				return 'color: #F44336; font-weight: bold;';
			default:
				return 'color: #5f5f5f;';
		}
	}

	onKeyDownQtdEditar(modal){
		if (!this.formularioEdicao.invalid){
			this.alterar();
			modal.close();
		}
	}

}
